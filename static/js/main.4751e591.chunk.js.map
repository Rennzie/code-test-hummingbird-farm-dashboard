{"version":3,"sources":["components/CropLegend.tsx","store/utils.ts","store/farmStore.tsx","components/Field.tsx","api/getFarm.ts","api/getCrops.ts","components/SelectedFieldView.tsx","components/DashPanel.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["cropColors","Map","useStyles","makeStyles","legendWrapper","position","right","top","zIndex","CropLegend","classes","useState","anchorEl","setAnchorEl","name","color","iterableColors","setIterableColors","useEffect","colorArray","forEach","push","handleClose","className","Button","variant","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","map","ListItem","key","style","display","justifyContent","ListItemIcon","width","height","backgroundColor","ListItemText","primary","MenuItem","updateFieldsCrop","crop","fields","fieldName","field","newYield","yieldAverage","fieldArea","cropRiskFactor","fieldDiseaseSusceptibility","cropPricePerTonne","expectedYield","Math","round","calcExpectedYield","expected_yield","hectares","disease_risk_factor","disease_susceptibility","price_per_tonne","selectedCrop","yield","updateFieldCropAndYields","updatedFields","farmYield","reduce","accumulator","fieldYield","updateFarmYield","resetFieldsCrop","initialFarmState","farmName","farmCenter","selectedField","initialFarmContext","farmState","farmDispatch","FarmContext","createContext","farmReducer","state","action","type","payload","Error","useFarmState","useContext","Field","fillColor","setFillColor","selectedStyle","setSelectedStyle","opacity","get","GeoJSON","fillOpacity","data","boundary","onclick","useGetFarm","setData","loading","setLoading","error","setError","axios","then","res","farm","catch","err","finally","useGetCrops","crops","selectedFieldWrapper","padding","spacing","boxSizing","flexDirection","alignItems","detailsWrapper","SelectedFieldView","loadingCrops","activeField","setActiveField","nextField","find","Paper","square","Typography","TextField","select","fullWidth","label","value","onChange","target","nextCrop","helperText","margin","disabled","component","dashPanel","DashPanel","chartData","setChartData","newChartData","align","series","colorScheme","appWrapper","App","farmData","loadingFarm","CircularProgress","size","center","centre","coordinates","zoom","TileLayer","url","window","location","hostname","match","ReactDOM","render","children","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAIaA,EAAa,IAAIC,IAAI,CAChC,CAAC,6BAA8B,WAC/B,CAAC,0BAA2B,WAC5B,CAAC,yBAA0B,WAC3B,CAAC,yBAA0B,WAC3B,CAAC,yBAA0B,WAC3B,CAAC,wBAAyB,WAC1B,CAAC,6BAA8B,WAC/B,CAAC,yBAA0B,WAC3B,CAAC,wBAAyB,WAC1B,CAAC,sBAAuB,aAKpBC,EAAYC,aAAW,iBAAO,CAClCC,cAAe,CACbC,SAAU,WACVC,MAAO,GACPC,IAAK,GACLC,OAAQ,SAsDGC,MA9Cf,WACE,IAAMC,EAAUR,EAAU,IADN,EAEYS,mBAA6B,MAFzC,mBAEbC,EAFa,KAEHC,EAFG,OAGwBF,mBAAS,CAAC,CAAEG,KAAM,GAAIC,MAAO,MAHrD,mBAGbC,EAHa,KAGGC,EAHH,KAKpBC,qBAAU,WACR,IAAMC,EAAyB,GAC/BnB,EAAWoB,SAAQ,SAACL,EAAOD,GAAR,OAAiBK,EAAWE,KAAK,CAAEP,OAAMC,aAC5DE,EAAkBE,KACjB,CAACF,IAEJ,IAIMK,EAAc,WAClBT,EAAY,OAGd,OACE,yBAAKU,UAAWb,EAAQN,eACtB,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,YAAYV,MAAM,UAAUW,QAV7B,SAACC,GAClBd,EAAYc,EAAMC,iBAShB,eAGA,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHlB,SAAUA,EACVmB,aAAW,EACXC,KAAMC,QAAQrB,GACdsB,QAASZ,EACTG,QAAQ,QAEPT,EAAemB,KAAI,SAAApB,GAAK,OACvB,kBAACqB,EAAA,EAAD,CAAUC,IAAKtB,EAAMD,KAAMwB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WACnE,kBAACC,EAAA,EAAD,KACE,yBAAKH,MAAO,CAAEI,MAAO,GAAIC,OAAQ,GAAIC,gBAAiB7B,EAAMA,UAE9D,kBAAC8B,EAAA,EAAD,CAAcC,QAAS/B,EAAMD,WAGjC,kBAACiC,EAAA,EAAD,CAAUrB,QAASJ,GAAnB,iB,ikBClER,IA6BM0B,EAAmB,SAACC,EAAYC,EAAiBC,GAiBrD,OAhBsBD,EAAOf,KAAI,SAAAiB,GAC/B,GAAIA,EAAMtC,OAASqC,EAAW,CAC5B,IAAME,EArBc,SACxBC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EACFL,EAAeC,GAAcC,EAAiBC,GAChDC,EAEF,OAAOE,KAAKC,MAAMF,GAUGG,CACfb,EAAKc,eACLX,EAAMY,SACNf,EAAKgB,oBACLb,EAAMc,uBACNjB,EAAKkB,iBAGP,OAAO,EAAP,GAAYf,EAAZ,CAAmBgB,aAAcnB,EAAMoB,MAAOhB,IAGhD,OAAOD,MA2BEkB,EAA2B,SAACpB,EAAiBC,EAAmBF,GAC3E,IAAIsB,EASJ,MAAO,CAAEC,UAhFa,SAACtB,GAQvB,OAPiBA,EAAOuB,QAAO,SAACC,EAAD,GAAyC,IAAlBC,EAAiB,EAAxBN,MAC7C,OAAIM,EACKD,EAAcC,EAEhBD,IACN,GAwEsBE,CALvBL,EADEtB,EACcD,EAAiBC,EAAMC,EAAQC,GApB3B,SAACD,EAAiBC,GASxC,OARsBD,EAAOf,KAAI,SAAAiB,GAC/B,OAAIA,EAAMtC,OAASqC,EACV,EAAP,GAAYC,EAAZ,CAAmBgB,aAAc,KAAMC,MAAO,IAGzCjB,KAgBSyB,CAAgB3B,EAAQC,IAKJD,OAAQqB,I,yjBCxDhD,IAAMO,EAA8B,CAClCN,UAAW,KACXO,SAAU,GACVC,WAAY,KACZC,cAAe,GACf/B,OAAQ,IAGJgC,EAAyF,CAC7FC,UAAWL,EACXM,aAAc,cAGVC,EAAcC,wBAAcJ,GAE5BK,EAAc,SAACC,EAAkBC,GACrC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,KACFF,EADL,CAEEtC,OAAQuC,EAAOE,UAEnB,IAAK,mBACH,OAAO,KACFH,EADL,CAEEP,cAAeQ,EAAOE,UAE1B,IAAK,eACH,OAAO,KACFH,EADL,GAEKlB,EAAyBkB,EAAMtC,OAAQuC,EAAOE,QAAQxC,UAAWsC,EAAOE,QAAQ1C,OAEvF,IAAK,iBACH,OAAO,KACFuC,EADL,GAEKlB,EAAyBkB,EAAMtC,OAAQuC,EAAOE,UAGrD,QAEE,MAAM,IAAIC,MAAJ,sBAAyBH,EAAOC,KAAhC,2CAyBL,IAAMG,EAAe,kBAAMC,qBAAWT,ICzB9BU,MAzCf,YAAkC,IAAjB3C,EAAgB,EAAhBA,MAAgB,EAI3ByC,IAFWZ,EAFgB,EAE7BE,UAAaF,cACbG,EAH6B,EAG7BA,aAH6B,EAKGzE,mBAAS,WALZ,mBAKxBqF,EALwB,KAKbC,EALa,OAMWtF,qBANX,mBAMxBuF,EANwB,KAMTC,EANS,KA8B/B,OAtBAjF,qBAAU,WACR,OAAI+D,IAAkB7B,EAAMtC,KACnBqF,EAAiB,CAAEpF,MAAO,UAAWqF,QAAS,IAEhDD,EAAiB,CAAEpF,MAAOiF,EAAWI,QAAS,MACpD,CAACnB,EAAe7B,EAAO+C,EAAkBH,IAE5C9E,qBAAU,WACR,GAAIkC,EAAMgB,aAAc,CACtB,IAAMrD,EAAQf,EAAWqG,IAAIjD,EAAMgB,aAAatD,MAC5CC,GACFkF,EAAalF,QAGfkF,EAAa,aAEd,CAAC7C,IAOF,kBAACkD,EAAA,EAAD,CACEhE,MAAO,kBAAM4D,GACbF,UAAWA,EACXO,YAAa,GACbC,KAAMpD,EAAMqD,SACZC,QAVgB,WAClBtB,EAAa,CAAEM,KAAM,mBAAoBC,QAASvC,EAAMtC,W,2CC7B7C6F,MAjBf,WAAuB,IAAD,EACIhG,qBADJ,mBACb6F,EADa,KACPI,EADO,OAEUjG,oBAAS,GAFnB,mBAEbkG,EAFa,KAEJC,EAFI,OAGMnG,qBAHN,mBAGboG,EAHa,KAGNC,EAHM,KAcpB,OATA9F,qBAAU,WACR4F,GAAW,GACXG,IACGZ,IAAI,mDACJa,MAAK,SAAAC,GAAG,OAAIP,EAAQ,CAAEQ,KAAMD,EAAIX,UAChCa,OAAM,SAAAC,GAAG,OAAIN,EAASM,MACtBC,SAAQ,kBAAMT,GAAW,QAC3B,CAACA,EAAYF,IAET,CAAEJ,OAAMK,UAASE,UCGXS,MAjBf,WAAwB,IAAD,EACG7G,qBADH,mBACd6F,EADc,KACRI,EADQ,OAESjG,oBAAS,GAFlB,mBAEdkG,EAFc,KAELC,EAFK,OAGKnG,qBAHL,mBAGdoG,EAHc,KAGPC,EAHO,KAcrB,OATA9F,qBAAU,WACR4F,GAAW,GACXG,IACGZ,IAAI,mDACJa,MAAK,SAAAC,GAAG,OAAIP,EAAQ,CAAEa,MAAON,EAAIX,UACjCa,OAAM,SAAAC,GAAG,OAAIN,EAASM,MACtBC,SAAQ,kBAAMT,GAAW,QAC3B,CAACA,EAAYF,IAET,CAAEJ,OAAMK,UAASE,UChBpB7G,EAAYC,aAAW,kBAAyB,CACpDuH,qBAAsB,CACpBC,SAASC,EAFgB,EAAGA,SAEX,GACjBC,UAAW,aACXnF,MAAO,OACPC,OAAQ,QACRJ,QAAS,OACTuF,cAAe,SACftF,eAAgB,eAChBuF,WAAY,UAEdC,eAAgB,CACdzF,QAAS,OACTC,eAAgB,gBAChBuF,WAAY,SACZrF,MAAO,YAqFIuF,MA7Ef,WACE,IAAMvH,EAAUR,EAAU,IADC,EAKvB2F,IALuB,IAGzBV,UAAaF,EAHY,EAGZA,cAAe/B,EAHH,EAGGA,OAC5BkC,EAJyB,EAIzBA,aAJyB,EAOaoC,IAAhChB,EAPmB,EAOnBA,KAAe0B,EAPI,EAObrB,QAPa,EASWlG,qBATX,mBASpBwH,EAToB,KASPC,EATO,KA+B3B,OApBAlH,qBAAU,WACR,GAAI+D,EAAe,CACjB,IAAMoD,EAAYnF,EAAOoF,MAAK,SAAAlF,GAAK,OAAIA,EAAMtC,OAASmE,KACtDmD,EAAeC,MAEhB,CAACD,EAAgBlF,EAAQ+B,IAgB1B,kBAACsD,EAAA,EAAD,CAAOC,QAAM,EAACjH,UAAWb,EAAQgH,sBAC9BS,IAAgBD,EACf,oCACE,kBAACO,EAAA,EAAD,CAAYhH,QAAQ,MAAM0G,EAAYrH,MAKtC,yBAAKS,UAAWb,EAAQsH,gBACtB,kBAACS,EAAA,EAAD,CAAYhH,QAAQ,SAApB,SAAmC0G,EAAYnE,UAC/C,kBAACyE,EAAA,EAAD,CAAYhH,QAAQ,SAApB,8BAAqD0G,EAAY9D,QAMnE,kBAACqE,EAAA,EAAD,CACE5G,GAAG,2BACH6G,QAAM,EACNC,WAAS,EACTC,MAAM,OACNC,MAAOX,EAAY/D,aAAe+D,EAAY/D,aAAatD,KAAO,GAClEiI,SApCiB,SAACpH,GAC1B,GAA2B,gBAAvBA,EAAMqH,OAAOF,MACf1D,EAAa,CAAEM,KAAM,iBAAkBC,QAASV,QAC3C,CACL,IAAMgE,EAAWzC,EAAKiB,MAAMa,MAAK,SAACrF,GAAD,OAAgBA,EAAKnC,OAASa,EAAMqH,OAAOF,SAE5E1D,EAAa,CACXM,KAAM,eACNC,QAAS,CAAExC,UAAW8B,EAAehC,KAAMgG,OA6BvCC,WAAYf,EAAY/D,aAAe,mBAAqB,gBAC5D+E,OAAO,UAEP,kBAACpG,EAAA,EAAD,CAAU+F,MAAM,KAEftC,EAAKiB,MAAMtF,KAAI,SAACc,GAAD,OACd,kBAACF,EAAA,EAAD,CAAUV,IAAKY,EAAKnC,KAAMgI,MAAO7F,EAAKnC,MACnCmC,EAAKnC,SAGV,kBAACiC,EAAA,EAAD,CAAUqG,UAAWjB,EAAY/D,aAAc0E,MAAM,eAArD,iBAMJ,kBAACL,EAAA,EAAD,CAAYY,UAAU,KAAtB,uC,QC9FFnJ,EAAYC,aAAW,iBAAO,CAClCmJ,UAAW,CACT3B,QAAS,GACTE,UAAW,aACXtF,QAAS,OACTuF,cAAe,SACftF,eAAgB,gBAChBuF,WAAY,SACZrF,MAAO,OACPC,OAAQ,aAoDG4G,MApCf,YAAyC,IAApBxE,EAAmB,EAAnBA,SACbrE,EAAUR,EAAU,IADY,EAIlC2F,IADFV,UAAaX,EAHuB,EAGvBA,UAAWtB,EAHY,EAGZA,OAHY,EAMJvC,mBAAS,CAAC,CAAE0B,IAAK,GAAImE,KAAM,KANvB,mBAM/BgD,EAN+B,KAMpBC,EANoB,KAiBtC,OATAvI,qBAAU,WACR,IAAMwI,EAAexG,EAAOf,KAAI,SAAAiB,GAAK,MAAK,CACxCf,IAAKe,EAAMtC,KACX0F,KAAMpD,EAAMiB,MAAQjB,EAAMiB,MAAQ,MAGpCoF,EAAaC,KACZ,CAACxG,EAAQuG,IAGV,6BAASlI,UAAWb,EAAQ4I,WAC1B,kBAACb,EAAA,EAAD,CAAYhH,QAAQ,MAAMsD,GAC1B,kBAAC0D,EAAA,EAAD,CAAYhH,QAAQ,MAApB,mCAAuD+C,GACvD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACE,kBAACiE,EAAA,EAAD,CAAYkB,MAAM,UAAlB,mCACA,kBAAC,WAAD,CACEC,OAAQ,kBAAC,YAAD,CAAWC,YAAY,YAC/BlH,OAAQ,IACRD,MAAO,IACP8D,KAAMgD,OCnDVtJ,EAAYC,aAAW,iBAAO,CAClC2J,WAAY,CACVvH,QAAS,OACTG,MAAO,QACPC,OAAQ,aA4CGoH,MAxCf,WACE,IAAMrJ,EAAUR,EAAU,IADb,EAKT2F,IAFW3C,EAHF,EAGXiC,UAAajC,OACbkC,EAJW,EAIXA,aAJW,EAOoCuB,IAAnCqD,EAPD,EAOLxD,KAAyByD,EAPpB,EAOWpD,QAQxB,OANA3F,qBAAU,WACJ8I,GACF5E,EAAa,CAAEM,KAAM,YAAaC,QAASqE,EAAS5C,KAAKlE,WAE1D,CAAC8G,EAAU5E,IAEV6E,EAAoB,kBAACC,EAAA,EAAD,CAAkB5H,MAAO,CAAE6G,OAAQ,UAAYgB,KAAM,MAG3E,0BAAM5I,UAAWb,EAAQoJ,YACtBE,GACC,oCACE,kBAAC,EAAD,CAAWjF,SAAUiF,EAAS5C,KAAKtG,OACnC,kBAAC,IAAD,CACEwB,MAAO,CAAEI,MAAO,OAAQC,OAAQ,SAEhCyH,OAAQJ,EAAS5C,KAAKiD,OAAOC,YAC7BC,KAAM,IAEN,kBAACC,EAAA,EAAD,CAAWC,IAAI,uDACdvH,EAAOf,KAAI,SAAAiB,GAAK,OACf,kBAAC,EAAD,CAAOf,IAAKe,EAAMtC,KAAMsC,MAAOA,QAGnC,kBAAC,EAAD,SCxCUnB,QACW,cAA7ByI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBR0EK,YAAwD,IAAhCC,EAA+B,EAA/BA,SAA+B,EAE1BC,qBAAW1F,EAAaT,GAFE,mBAErDK,EAFqD,KAE1CC,EAF0C,KAI5D,OACE,kBAACC,EAAY6F,SAAb,CAAsBpC,MAAO,CAAE3D,YAAWC,iBAAiB4F,KQ/E7D,KACE,kBAAC,EAAD,OAEFG,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrE,MAAK,SAAAsE,GACjCA,EAAaC,kB","file":"static/js/main.4751e591.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Menu, MenuItem, Button, ListItemIcon, ListItemText, ListItem } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const cropColors = new Map([\n  ['Winter Wheat - Reflectance', '#FFCDD2'],\n  ['Winter Wheat - Sundance', '#F44336'],\n  ['Winter Wheat - Skyfall', '#C62828'],\n  ['Winter Wheat - Dickens', '#D50000'],\n  ['Sprint Wheat - Granary', '#795548'],\n  ['Sprint Wheat - Belepi', '#3E2723'],\n  ['Winter Barley - California', '#A5D6A7'],\n  ['Winter Barley - Belfry', '#388E3C'],\n  ['Winter Barley - Craft', '#1B5E20'],\n  ['Winter OSR - Harper', '#FDD835']\n]);\n\ntype ColorSet = { color: string; name: string };\n\nconst useStyles = makeStyles(() => ({\n  legendWrapper: {\n    position: 'absolute',\n    right: 10,\n    top: 10,\n    zIndex: 1000\n  }\n}));\n\n/**\n * Displays a list of the crops and their designated colors\n * - Button renders top right of the screen\n */\nfunction CropLegend() {\n  const classes = useStyles({});\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [iterableColors, setIterableColors] = useState([{ name: '', color: '' }]);\n\n  useEffect(() => {\n    const colorArray: ColorSet[] = [];\n    cropColors.forEach((color, name) => colorArray.push({ name, color }));\n    setIterableColors(colorArray);\n  }, [setIterableColors]);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.legendWrapper}>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\n        Crop Legend\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        variant=\"menu\"\n      >\n        {iterableColors.map(color => (\n          <ListItem key={color.name} style={{ display: 'flex', justifyContent: 'center' }}>\n            <ListItemIcon>\n              <div style={{ width: 40, height: 20, backgroundColor: color.color }} />\n            </ListItemIcon>\n            <ListItemText primary={color.name} />\n          </ListItem>\n        ))}\n        <MenuItem onClick={handleClose}>Close Menu</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default CropLegend;\n","import { Crop, Field } from '../components/Field';\n\n/**\n * Sums the yields for all fields supplied to it\n * returns: new farm yield\n */\nconst updateFarmYield = (fields: Field[]) => {\n  const newYield = fields.reduce((accumulator, { yield: fieldYield }) => {\n    if (fieldYield) {\n      return accumulator + fieldYield;\n    }\n    return accumulator;\n  }, 0);\n\n  return newYield;\n};\n\nconst calcExpectedYield = (\n  yieldAverage: number,\n  fieldArea: number,\n  cropRiskFactor: number,\n  fieldDiseaseSusceptibility: number,\n  cropPricePerTonne: number\n) => {\n  const expectedYield =\n    ((yieldAverage * fieldArea) / (cropRiskFactor * fieldDiseaseSusceptibility)) *\n    cropPricePerTonne;\n\n  return Math.round(expectedYield);\n};\n\n/**\n * Sets a given fields `selectedCrop` and  calculates the `yield`\n * returns all the fields, now updated\n */\nconst updateFieldsCrop = (crop: Crop, fields: Field[], fieldName: string) => {\n  const updatedFields = fields.map(field => {\n    if (field.name === fieldName) {\n      const newYield = calcExpectedYield(\n        crop.expected_yield,\n        field.hectares,\n        crop.disease_risk_factor,\n        field.disease_susceptibility,\n        crop.price_per_tonne\n      );\n\n      return { ...field, selectedCrop: crop, yield: newYield };\n    }\n\n    return field;\n  });\n\n  return updatedFields;\n};\n\n/**\n * Sets a given fields `selectedCrop` and `yield` values to null and 0 respectivly\n * returns all the fields, now updated\n */\nconst resetFieldsCrop = (fields: Field[], fieldName: string) => {\n  const updatedFields = fields.map(field => {\n    if (field.name === fieldName) {\n      return { ...field, selectedCrop: null, yield: 0 };\n    }\n\n    return field;\n  });\n\n  return updatedFields;\n};\n\n/**\n * Function to update a fields crop and the yield estimate of both the farm and the crop\n * - If no crop is provided, function will resest the fields `selectedCrop` and `yield` to null then update the farms yield\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const updateFieldCropAndYields = (fields: Field[], fieldName: string, crop?: Crop) => {\n  let updatedFields: Field[];\n  if (crop) {\n    updatedFields = updateFieldsCrop(crop, fields, fieldName);\n  } else {\n    updatedFields = resetFieldsCrop(fields, fieldName);\n  }\n\n  const updatedFarmYield = updateFarmYield(updatedFields);\n\n  return { farmYield: updatedFarmYield, fields: updatedFields };\n};\n","import React, { createContext, useReducer, useContext } from 'react';\nimport { Field, Crop } from '../components/Field';\nimport { updateFieldCropAndYields } from './utils';\n\ntype FarmState = {\n  farmYield: number | null;\n  selectedField: string;\n  farmName: string;\n  farmCenter: any;\n  fields: Field[];\n};\n\ntype FarmAction =\n  | {\n      type: 'setFields';\n      payload: Field[];\n    }\n  | {\n      type: 'setSelectedField';\n      payload: string;\n    }\n  | {\n      type: 'setFieldCrop';\n      payload: {\n        fieldName: string;\n        crop: Crop;\n      };\n    }\n  | { type: 'resetFieldCrop'; payload: string };\n\nconst initialFarmState: FarmState = {\n  farmYield: null,\n  farmName: '',\n  farmCenter: null,\n  selectedField: '',\n  fields: []\n};\n\nconst initialFarmContext: { farmState: FarmState; farmDispatch: React.Dispatch<FarmAction> } = {\n  farmState: initialFarmState,\n  farmDispatch: () => {}\n};\n\nconst FarmContext = createContext(initialFarmContext);\n\nconst farmReducer = (state: FarmState, action: FarmAction) => {\n  switch (action.type) {\n    case 'setFields':\n      return {\n        ...state,\n        fields: action.payload\n      };\n    case 'setSelectedField':\n      return {\n        ...state,\n        selectedField: action.payload\n      };\n    case 'setFieldCrop':\n      return {\n        ...state,\n        ...updateFieldCropAndYields(state.fields, action.payload.fieldName, action.payload.crop)\n      };\n    case 'resetFieldCrop':\n      return {\n        ...state,\n        ...updateFieldCropAndYields(state.fields, action.payload)\n      };\n\n    default:\n      // @ts-ignore\n      throw new Error(`action type ${action.type} does not match any available action`);\n  }\n};\n\ntype FarmProviderProps = {\n  children: React.ReactNode;\n};\n\n/**\n * Provides the default state and dispatch for the farm\n * Allows children to access the state via the `useFarmState` hook\n */\nexport function FarmProvider({ children }: FarmProviderProps) {\n  // @ts-ignore\n  const [farmState, farmDispatch] = useReducer(farmReducer, initialFarmState);\n\n  return (\n    <FarmContext.Provider value={{ farmState, farmDispatch }}>{children}</FarmContext.Provider>\n  );\n}\n\n/**\n * For access the farm state and dispatch\n * - returns and object with `farmState` and `farmDispatch`\n */\nexport const useFarmState = () => useContext(FarmContext);\n","import React, { useEffect, useState } from 'react';\nimport { GeoJSON } from 'react-leaflet';\nimport { cropColors } from './CropLegend';\nimport { useFarmState } from '../store';\n\nexport type Field = {\n  name: string;\n  boundary: any;\n  hectares: number;\n  disease_susceptibility: number;\n  selectedCrop?: Crop | null;\n  yield?: number;\n};\n\nexport type Crop = {\n  name: string;\n  expected_yield: number;\n  disease_risk_factor: number;\n  price_per_tonne: number;\n};\n\ntype Props = {\n  field: Field;\n};\n\n/**\n * Renders a field polygon to the map\n * - handles state of polygon when selected\n */\nfunction Field({ field }: Props) {\n  const {\n    farmState: { selectedField },\n    farmDispatch\n  } = useFarmState();\n  const [fillColor, setFillColor] = useState('#BDBDBD');\n  const [selectedStyle, setSelectedStyle] = useState();\n\n  useEffect(() => {\n    if (selectedField === field.name) {\n      return setSelectedStyle({ color: '#32cd32', opacity: 1 });\n    }\n    return setSelectedStyle({ color: fillColor, opacity: 1 });\n  }, [selectedField, field, setSelectedStyle, fillColor]);\n\n  useEffect(() => {\n    if (field.selectedCrop) {\n      const color = cropColors.get(field.selectedCrop.name);\n      if (color) {\n        setFillColor(color);\n      }\n    } else {\n      setFillColor('#BDBDBD');\n    }\n  }, [field]);\n\n  const handleClick = () => {\n    farmDispatch({ type: 'setSelectedField', payload: field.name });\n  };\n\n  return (\n    <GeoJSON\n      style={() => selectedStyle}\n      fillColor={fillColor}\n      fillOpacity={0.7}\n      data={field.boundary}\n      onclick={handleClick}\n    />\n  );\n}\n\nexport default Field;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Returns a object with `data`,  `loading` and `error`\n * `data` contains a farm object with `name`, `center` and list of `fields`.\n *    - It is `undefined` until the request complete\n * `loading` is `true` while request is in flight, otherwise `false`\n * `error` is `undefined` unless a network error is returned\n */\nfunction useGetFarm() {\n  const [data, setData] = useState<any | undefined>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get('http://www.mocky.io/v2/5cc809b5300000a300055eac')\n      .then(res => setData({ farm: res.data }))\n      .catch(err => setError(err))\n      .finally(() => setLoading(false));\n  }, [setLoading, setData]);\n\n  return { data, loading, error };\n}\n\nexport default useGetFarm;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Returns a object with `data`,  `loading` and `error`\n * `data` contains a list of crops at `data.crops`.\n *    - It is undefined until the request complete\n * `loading` is `true` while request is in flight, otherwise `false`\n * `error` is `undefined` unless a network error is returned\n */\nfunction useGetCrops() {\n  const [data, setData] = useState<any | undefined>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get('http://www.mocky.io/v2/5cc8098e300000a300055eab')\n      .then(res => setData({ crops: res.data }))\n      .catch(err => setError(err))\n      .finally(() => setLoading(false));\n  }, [setLoading, setData]);\n\n  return { data, loading, error };\n}\n\nexport default useGetCrops;\n","import React, { useState, useEffect } from 'react';\nimport { Typography, Paper, TextField, MenuItem } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\nimport { Crop } from './Field';\nimport { useGetCrops } from '../api';\nimport { useFarmState } from '../store';\n\nconst useStyles = makeStyles(({ spacing }: Theme) => ({\n  selectedFieldWrapper: {\n    padding: spacing(2),\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '200px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  detailsWrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%'\n  }\n}));\n\n/**\n * Renders details of a selected field\n * - Handles selecting a crop for the field\n */\nfunction SelectedFieldView() {\n  const classes = useStyles({});\n  const {\n    farmState: { selectedField, fields },\n    farmDispatch\n  } = useFarmState();\n\n  const { data, loading: loadingCrops } = useGetCrops();\n\n  const [activeField, setActiveField] = useState();\n\n  useEffect(() => {\n    if (selectedField) {\n      const nextField = fields.find(field => field.name === selectedField);\n      setActiveField(nextField);\n    }\n  }, [setActiveField, fields, selectedField]);\n\n  const handleSelectedCrop = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === 'remove-crop') {\n      farmDispatch({ type: 'resetFieldCrop', payload: selectedField });\n    } else {\n      const nextCrop = data.crops.find((crop: Crop) => crop.name === event.target.value);\n\n      farmDispatch({\n        type: 'setFieldCrop',\n        payload: { fieldName: selectedField, crop: nextCrop as Crop }\n      });\n    }\n  };\n\n  return (\n    <Paper square className={classes.selectedFieldWrapper}>\n      {activeField && !loadingCrops ? (\n        <>\n          <Typography variant=\"h6\">{activeField.name}</Typography>\n\n          {/* ---------------------\n              FIELD DETAILS\n          ----------------------- */}\n          <div className={classes.detailsWrapper}>\n            <Typography variant=\"body1\">Area: {activeField.hectares}</Typography>\n            <Typography variant=\"body1\">Estimated yield value: £{activeField.yield}</Typography>\n          </div>\n\n          {/* ---------------------\n              CROP HANDLER\n          ----------------------- */}\n          <TextField\n            id=\"standard-select-currency\"\n            select\n            fullWidth\n            label=\"Crop\"\n            value={activeField.selectedCrop ? activeField.selectedCrop.name : ''}\n            onChange={handleSelectedCrop}\n            helperText={activeField.selectedCrop ? 'Change your crop' : 'Choose a crop'}\n            margin=\"normal\"\n          >\n            <MenuItem value=\"\" />\n\n            {data.crops.map((crop: Crop) => (\n              <MenuItem key={crop.name} value={crop.name}>\n                {crop.name}\n              </MenuItem>\n            ))}\n            <MenuItem disabled={!activeField.selectedCrop} value=\"remove-crop\">\n              Remove Crop\n            </MenuItem>\n          </TextField>\n        </>\n      ) : (\n        <Typography component=\"i\">Select a field to see its details</Typography>\n      )}\n    </Paper>\n  );\n}\n\nexport default SelectedFieldView;\n","import React, { useState, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BarChart, BarSeries } from 'reaviz';\n\nimport { SelectedFieldView, CropLegend } from '.';\nimport { useFarmState } from '../store';\n\nconst useStyles = makeStyles(() => ({\n  dashPanel: {\n    padding: 26,\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '30vw',\n    height: '100vh'\n  }\n}));\n\ntype Props = {\n  farmName: string;\n};\n\n/**\n * Renders the dashboard for the farm in a narrow vertical panel\n * Displays:\n *  - Farm name\n *  - Estimated farm yield\n *  - Details of the selected farm\n *  - bar chart with estimated yield values per field\n */\nfunction DashPanel({ farmName }: Props) {\n  const classes = useStyles({});\n  const {\n    farmState: { farmYield, fields }\n  } = useFarmState();\n\n  const [chartData, setChartData] = useState([{ key: '', data: 0 }]);\n\n  useEffect(() => {\n    const newChartData = fields.map(field => ({\n      key: field.name,\n      data: field.yield ? field.yield : 0\n    }));\n\n    setChartData(newChartData);\n  }, [fields, setChartData]);\n\n  return (\n    <section className={classes.dashPanel}>\n      <Typography variant=\"h4\">{farmName}</Typography>\n      <Typography variant=\"h6\">Estimated farm yield value: £{farmYield}</Typography>\n      <SelectedFieldView />\n      <CropLegend />\n      <div>\n        <Typography align=\"center\">Estimated yield value per field</Typography>\n        <BarChart\n          series={<BarSeries colorScheme=\"pastel1\" />}\n          height={300}\n          width={400}\n          data={chartData}\n        />\n      </div>\n    </section>\n  );\n}\n\nexport default DashPanel;\n","import React, { useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport { Field, DashPanel, CropLegend } from '.';\nimport { useGetFarm } from '../api';\nimport { useFarmState } from '../store';\n\nconst useStyles = makeStyles(() => ({\n  appWrapper: {\n    display: 'flex',\n    width: '100vw',\n    height: '100vh'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles({});\n  const {\n    farmState: { fields },\n    farmDispatch\n  } = useFarmState();\n\n  const { data: farmData, loading: loadingFarm } = useGetFarm();\n\n  useEffect(() => {\n    if (farmData) {\n      farmDispatch({ type: 'setFields', payload: farmData.farm.fields });\n    }\n  }, [farmData, farmDispatch]);\n\n  if (loadingFarm) return <CircularProgress style={{ margin: '0 auto' }} size={100} />;\n\n  return (\n    <main className={classes.appWrapper}>\n      {farmData && (\n        <>\n          <DashPanel farmName={farmData.farm.name} />\n          <LeafletMap\n            style={{ width: '70vw', height: '100vh' }}\n            // @ts-ignore\n            center={farmData.farm.centre.coordinates}\n            zoom={14}\n          >\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n            {fields.map(field => (\n              <Field key={field.name} field={field} />\n            ))}\n          </LeafletMap>\n          <CropLegend />\n        </>\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { FarmProvider } from './store';\n\nReactDOM.render(\n  <FarmProvider>\n    <App />\n  </FarmProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}